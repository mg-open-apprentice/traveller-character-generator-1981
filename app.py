from flask import Flask, render_template, jsonify, request
from character_generator import Character
import json
import os
import traceback
import random

app = Flask(__name__)

def load_character():
    if os.path.exists('current_character.json'):
        with open('current_character.json', 'r') as f:
            return json.load(f)
    return None

def save_character(character_data):
    with open('current_character.json', 'w') as f:
        json.dump(character_data, f)

def get_character_state():
    """Determine what state the character creation is in"""
    character = load_character()
    if not character:
        return 'start'  # No character - ready to create
    elif character.get('creation_complete', False):
        return 'complete'  # Character finished
    else:
        return 'in_progress'  # Character exists but not finished

@app.route('/')
def index():
    character = load_character()
    state = get_character_state()
    return render_template('simple.html', character=character, state=state)

@app.route('/template-test')
def template_test():
    character = load_character()
    state = get_character_state()
    return render_template('simple.html', character=character, state=state)

@app.route('/api/character/create', methods=['POST'])
def create_character():
    print("=== CREATING CHARACTER ===")
    
    # Check if character already exists and is in progress
    existing_state = get_character_state()
    if existing_state == 'in_progress':
        return jsonify({"error": "Character creation already in progress"}), 400
    
    try:
        # Create new character
        character = Character()
        
        # Initialize with name and age from the Character class, no characteristics yet
        character_data = {
            "name": character.name,  # Use the name already generated by the Character class
            "age": character.age,    # Pull age from the Character class (should be 18)
            "characteristics": {},   # Empty dictionary to be filled one by one
            "creation_complete": False,
            "creation_phase": "characteristics"
        }
        
        print(f"Character created: {character_data}")
        
        # Save character to file
        save_character(character_data)
        
        return jsonify(character_data)
        
    except Exception as e:
        print(f"ERROR: {e}")
        traceback.print_exc()  # Print full stack trace
        return jsonify({"error": str(e)}), 500

@app.route('/api/character/roll_characteristic', methods=['POST'])
def roll_characteristic():
    print("=== ROLL CHARACTERISTIC ROUTE CALLED ===")
    
    # Check if character exists
    character_data = load_character()
    if not character_data:
        return jsonify({"error": "No character exists"}), 400
    
    try:
        # Get the characteristic to roll from request
        data = request.get_json()
        if not data or 'characteristic' not in data:
            return jsonify({"error": "No characteristic specified"}), 400
        
        characteristic = data['characteristic'].lower()
        print(f"Rolling characteristic: {characteristic}")
        
        # Validate characteristic
        valid_characteristics = ['str', 'dex', 'end', 'int', 'edu', 'soc']
        if characteristic not in valid_characteristics:
            return jsonify({"error": f"Invalid characteristic: {characteristic}"}), 400
        
        # Check if this characteristic already exists
        if characteristic in character_data.get('characteristics', {}):
            return jsonify({"error": f"Characteristic {characteristic} already rolled"}), 400
        
        # Roll the characteristic using Character class method
        # Since we don't want to recreate the entire character,
        # we'll use the roll_2d6 method from Character
        value = Character.roll_2d6()
        
        # Initialize characteristics dict if it doesn't exist
        if 'characteristics' not in character_data:
            character_data['characteristics'] = {}
        
        # Add the new characteristic
        character_data['characteristics'][characteristic] = value
        
        # Save updated character
        save_character(character_data)
        
        # Convert to hex for display
        hex_value = hex(value)[2:].upper() if 10 <= value <= 15 else str(value)
        
        return jsonify({
            "success": True,
            "characteristic": characteristic,
            "value": value,
            "hex_value": hex_value,
            "character": character_data
        })
        
    except Exception as e:
        print(f"ERROR in roll_characteristic: {e}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/api/character/delete', methods=['POST'])
def delete_character():
    print("=== DELETE CHARACTER ROUTE CALLED ===")
    
    try:
        if os.path.exists('current_character.json'):
            os.remove('current_character.json')
            print("Character file deleted - resetting to start state")
            return jsonify({
                "success": True, 
                "message": "Character deleted successfully", 
                "new_state": "start"
            })
        else:
            print("No character file found to delete")
            return jsonify({
                "success": True, 
                "message": "No character to delete", 
                "new_state": "start"
            })
            
    except Exception as e:
        print(f"ERROR in delete_character: {e}")
        traceback.print_exc()  # Print the full stack trace
        return jsonify({
            "success": False, 
            "message": f"Error deleting character: {str(e)}"
        }), 500

@app.route('/test-character')
def test_character():
    try:
        character = Character()
        
        html = f"""
        <h1>Character Test</h1>
        <p>Name: {character.name}</p>
        <p>Age: {character.age}</p>
        <a href='/template-test'>Back to Template Test</a>
        """
        return html
        
    except Exception as e:
        return f"<h1>Error</h1><p>{str(e)}</p>"

if __name__ == '__main__':
    print("Starting Flask app...")
    app.run(debug=True, port=5000)